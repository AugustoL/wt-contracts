const abiDecoder = require('abi-decoder');
const simulateCrowdsale = require('./simulateCrowdsale');
const lif2LifWei = require('./misc').lif2LifWei;

const LifToken = artifacts.require('LifToken.sol');
const Unit = artifacts.require('Unit.sol');

abiDecoder.addABI(Unit._json.abi);
abiDecoder.addABI(LifToken._json.abi);
/**
 * A library of helpers that spin up various privateCall / booking interactions.
 */

/**
 * Executes a beginCall booking
 * @param  {Address} caller           Address of the contract that inherits from PrivateCall
 * @param  {Address} clientAccount    Address of the person making a booking
 * @param  {String}  tokenOp          'approveData' or 'transferData'
 * @param  {Array}   accounts         The truffle contract accounts
 * @param  {Code}    passThroughData  call data to be executed in the Book drop through.
 * @param  {String}  userInfo         optional hex string: useful for non-duplicate calls
 * @return {Object}
 * @example
 *   const result = {
 *
 *     token,               // LifToken instance generated by simulateCrowdsale
 *     clientInitialBalance // clientAccounts token balance after crowdsale
 *     callerInitialBalance // calling contracts token balance after crowdsale (typically: 0);
 *     bookData,            // `book` call data
 *     beginCallData,       // `beginCall` call data
 *     transaction,         // Transaction object returned by `token.approveData / transferData`
 *     events,              // All abi-decoded events generated by the token call
 *     hash,                // dataHash of the call pending at `beginCall`
 *     userInfo,            // hex private data to the begin call: useful for testing error cases
 *     value                // number value of approval or transfer: 10e9
 *
 *   } = await help.runBeginCall(unit, augusto, 'approveData', accounts, getUnitsLengthData)
 */
async function runBeginCall(caller, clientAccount, tokenOp, accounts, passThroughData, _userInfo ){
  const userInfo = _userInfo || web3.toHex('user info');
  const value = lif2LifWei(10);

  const crowdsale = await simulateCrowdsale(100000000000, [40,30,20,10,0], accounts, 1);
  const token = LifToken.at(await crowdsale.token.call());

  const callerInitialBalance = await token.balanceOf(caller.address);
  const clientInitialBalance = await token.balanceOf(clientAccount);

  const bookData = caller.contract.book.getData(clientAccount, 60, 5, passThroughData);
  const beginCallData = caller.contract.beginCall.getData(bookData, userInfo);

  let tx;
  (tokenOp === 'approveData')
    ? tx = await token.approveData(caller.address, value, beginCallData, {from: clientAccount})
    : tx = await token.transferData(caller.address, value, beginCallData, {from: clientAccount});

  const events = abiDecoder.decodeLogs(tx.receipt.logs);
  const callStarted = events.filter(item => item && item.name === 'CallStarted')[0];
  const dataHashTopic = callStarted.events.filter(item => item.name === 'dataHash')[0];

  return {
    userInfo: userInfo,
    value: value,
    token: token,
    callerInitialBalance: callerInitialBalance,
    clientInitialBalance: clientInitialBalance,
    bookData: bookData,
    beginCallData: beginCallData,
    transaction: tx,
    events: events,
    hash: dataHashTopic.value
  }
}

/**
 * Executes a continueCall
 * @param  {Instance} index        WTIndex instance
 * @param  {Instance} hotel        Hotel instance
 * @param  {Address}  caller       Address of the contract that inherits from PrivateCall
 * @param  {Address}  hotelAccount Sender of the `callHotel` transaction
 * @param  {Bytes32}  hash         CallStarted dataHash value
 * @return {Object}
 * @example
 *   const result = {
 *     transaction,  // Transaction object returned by `token.approveData / transferData`
 *     events,       // All abi-decoded events generated by the token call
 *
 *   } = await help.runContiueCall(wtIndex, wtHotel, unit, hotelAccount, hash)
 */
async function runContinueCall(index, hotel, caller, hotelAccount, hash){
  const _continue = caller.contract.continueCall.getData(hash);
  const callUnit = await hotel.contract.callUnit.getData(caller.address, _continue);
  const tx = await index.callHotel(0, callUnit, {from: hotelAccount});
  const events = abiDecoder.decodeLogs(tx.receipt.logs);
  return {
    transaction: tx,
    events: events
  }
}

module.exports = {
  runBeginCall: runBeginCall,
  runContinueCall: runContinueCall
}